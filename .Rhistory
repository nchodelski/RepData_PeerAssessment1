# line below creates the normal curve using mean values from the simulation
stat_function(fun = dnorm, arg = list(mean = (1/lambda), sd = (1/lambda)/sqrt(40)), colour = "blue", size = 1.4) +
geom_vline(xintercept = 5, colour = "red", size = 3) +
ggtitle("Histogram: simulated exponential sample means") + xlab("mean of sample") +
theme_gray(base_size = 18)
ggplot(means_df, aes(x = means_array)) + geom_histogram(bin = .2, fill = "white", col = "black",  aes(y = ..density..)) +
# creates light blue density overlay
geom_density(alpha = .2, fill = "cornflowerblue") +
# line below creates the normal curve using mean values from the simulation
stat_function(fun = dnorm, arg = list(mean = (1/lambda), sd = (1/lambda)/sqrt(40)), colour = "red", size = 1.4) +
#adds a verticle line at the mean
geom_vline(xintercept = simulation_mean, colour = "blue", size = 2) +
ggtitle("Histogram: simulated exponential sample means") + xlab("mean of sample") +
theme_gray(base_size = 18)
ggplot(means_df, aes(x = means_array)) + geom_histogram(bin = .2, fill = "white", col = "black",  aes(y = ..density..)) +
# creates light blue density overlay
geom_density(alpha = .2, fill = "cornflowerblue") +
# line below creates the normal curve using mean values from the simulation
stat_function(fun = dnorm, arg = list(mean = (1/lambda), sd = (1/lambda)/sqrt(40)), colour = "red", size = 1.4) +
#adds a verticle line at the mean
geom_vline(xintercept = 5, colour = "blue", size = 1.5) +
ggtitle("Histogram: simulated exponential sample means") + xlab("mean of sample") +
theme_gray(base_size = 18)
ggplot(means_df, aes(x = means_array)) + geom_histogram(bin = .2, fill = "white", col = "black",  aes(y = ..density..)) +
# creates light blue density overlay
geom_density(alpha = .2, fill = "cornflowerblue") +
# line below creates the normal curve using mean values from the simulation
stat_function(fun = dnorm, arg = list(mean = (1/lambda), sd = (1/lambda)/sqrt(40)), colour = "red", size = 1.4) +
#adds a verticle line at the mean
geom_vline(xintercept = 5, colour = "blue", size = 1.5) +
ggtitle("Probability histogram: sample means from exponential distribution simulation") + xlab("Sample mean") +
theme_gray(base_size = 18)
g <- ggplot(means_df, aes(x = means_array)) + geom_histogram(bin = .2, fill = "white", col = "black",  aes(y = ..density..)) +
geom_density(alpha = .2, fill = "cornflowerblue") +  # creates light blue density overlay
# line below creates the normal curve using mean values from the simulation
stat_function(dnorm, arg = list(mean = (1/lambda), sd = (1/lambda)/sqrt(40)), "red", size = 1.4) +
#adds a verticle line at the mean
geom_vline(xintercept = 5, colour = "blue", size = 1.5) +
ggtitle("Probability histogram: sample means from exponential distribution simulation") + xlab("Sample mean") +
theme_gray(base_size = 18)
g <- ggplot(means_df, aes(x = means_array)) + geom_histogram(bin = .2, fill = "white", col = "black",  aes(y = ..density..)) +
geom_density(alpha = .2, fill = "cornflowerblue") +  # creates light blue density overlay
# line below creates the normal curve using mean values from the simulation
stat_function(fun = dnorm, arg = list(mean = (1/lambda), sd = (1/lambda)/sqrt(40)), "red", size = 1.4) +
#adds a verticle line at the mean
geom_vline(xintercept = 5, colour = "blue", size = 1.5) +
ggtitle("Probability histogram: sample means from exponential distribution simulation") + xlab("Sample mean") +
theme_gray(base_size = 18)
g <- ggplot(means_df, aes(x = means_array)) + geom_histogram(bin = .2, fill = "white", col = "black",  aes(y = ..density..)) +
geom_density(alpha = .2, fill = "cornflowerblue") +  # creates light blue density overlay
# line below creates the normal curve using mean values from the simulation
stat_function(fun = dnorm, arg = list(mean = (1/lambda), sd = (1/lambda)/sqrt(40)), col = "red", size = 1.4) +
#adds a verticle line at the mean
geom_vline(xintercept = 5, colour = "blue", size = 1.5) +
ggtitle("Probability histogram: sample means from exponential distribution simulation") + xlab("Sample mean") +
theme_gray(base_size = 18)
g
g <- ggplot(means_df, aes(x = means_array)) + geom_histogram(bin = .2, fill = "white", col = "black",  aes(y = ..density..)) +
geom_density(alpha = .2, fill = "cornflowerblue") +  # creates light blue density overlay
# line below creates the normal curve using mean values from the simulation
stat_function(fun = dnorm, arg = list(mean = (1/lambda), sd = (1/lambda)/sqrt(40)), col = "red", size = 1.4) +
geom_vline(xintercept = 5, colour = "blue", size = 1.5) +  #adds a verticle line at the mean
ggtitle("Probability histogram of 1000 simulated exp sample means") + xlab("Sample mean") +
ylab("Density") + theme_gray(base_size = 18)
g
g <- ggplot(means_df, aes(x = means_array)) + geom_histogram(bin = .2, fill = "white", col = "black",  aes(y = ..density..)) +
geom_density(alpha = .2, fill = "cornflowerblue") +  # creates light blue density overlay
# line below creates the normal curve using mean values from the simulation
stat_function(fun = dnorm, arg = list(mean = (1/lambda), sd = (1/lambda)/sqrt(40)), col = "red", size = 1.4) +
geom_vline(xintercept = 5, colour = "blue", size = 1.5) +  #adds a verticle line at the mean
ggtitle("Probability histogram of 1000 simulated exponential sample means") + xlab("Mean of sample") +
ylab("Density") + theme_gray(base_size = 18)
g
normal_means_array <- rnorm(1000, mean = 1/lambda, sd = (1/lambda)/sqrt(40))
mean(means_array) + c(-1,1) * 1.96 * sd(means_array) / sqrt(1000)
## [1] 4.950 5.048
results <- t.test(x = means_array, y = normal_means_array, alternative = "two.sided", paired = F, var.equal = T)
results
normal_means_array <- replicate(expr = mean(rnorm(n, mean = 5, sd = 5)), n = nosim, simplify = "array")
t.test(x = means_array, y = normal_means_array, alternative = "two.sided", paired = F, var.equal = T)
normal_means_array <- rnorm(100000, mean = 1/lambda, sd = (1/lambda)/sqrt(40))
t.test(x = means_array, y = normal_means_array, alternative = "two.sided", paired = F, var.equal = T)
normal_means_array <- rnorm(1000, mean = 1/lambda, sd = (1/lambda)/sqrt(40))
results <- t.test(x = means_array, y = normal_means_array, alternative = "two.sided", paired = F, var.equal = T)
results
normal_means_array <- rnorm(1000, mean = 1/lambda, sd = (1/lambda))
results <- t.test(x = means_array, y = normal_means_array, alternative = "two.sided", paired = F, var.equal = T)
results
normal_means_array <- rnorm(10000, mean = 1/lambda, sd = (1/lambda))
results <- t.test(x = means_array, y = normal_means_array, alternative = "two.sided", paired = F, var.equal = T)
results <- t.test(x = means_array, y = normal_means_array, alternative = "two.sided", paired = F, var.equal = T)
results <- t.test(x = means_array, y = normal_means_array, alternative = "two.sided", paired = F, var.equal = T)
results
results <- t.test(x = means_array, y = normal_means_array, alternative = "two.sided", paired = F, var.equal = T)
results
normal_means_array <- rnorm(10000, mean = 1/lambda, sd = 1/lambda/sqrt(40)) #  standard deviation re sample means of 40 vars
# t-test comparing the distribution of the normals and the exponential sample means
results <- t.test(x = means_array, y = normal_means_array, alternative = "two.sided", paired = F, var.equal = T)
results
#Evaluate the coverage of the confidence interval for 1/lambda: \( \bar{X}Â±1.96\frac{S}{\sqrt{n}} \).
mean(means_array) + c(-1,1) * 1.96 * sd(means_array) / sqrt(1000)
normal_means_array <- rnorm(10000, mean = 1/lambda, sd = 1/lambda/sqrt(40)) #  standard deviation re sample means of 40 vars
# t-test comparing the distribution of the normals and the exponential sample means
results <- t.test(x = means_array, y = normal_means_array, alternative = "two.sided", paired = F, var.equal = T)
results
normal_means_array <- rnorm(10000, mean = 1/lambda, sd = 1/lambda/sqrt(40)) #  standard deviation re sample means of 40 vars
# t-test comparing the distribution of the normals and the exponential sample means
results <- t.test(x = means_array, y = normal_means_array, alternative = "two.sided", paired = F, var.equal = T)
results
mean(means_array) + c(-1,1) * 1.96 * sd(means_array) / sqrt(1000)
mean(means_array) + c(-1,1) * qt(.975, n-1) * sd(means_array) / sqrt(n)
mean(means_array) + c(-1,1) * qt(.975, n-1) * sd(means_array) / sqrt(n)
mean(means_array) + c(-1,1) * qt(.975, n-1) * sd(means_array) / sqrt(1000)
mean(means_array) + c(-1,1) * 1.96 * sd(means_array) / sqrt(1000)
str(ToothGrowth)
summary <- aggregate(ToothGrowth$len ~ ToothGrowth$supp + ToothGrowth$dose, FUN = "mean")
names(summary) <- c("supplement", "dose","tooth_length")
summary
means_df <- as.data.frame(means_array)
library(ggplot2)
g <- ggplot(means_df, aes(x = means_array)) + geom_histogram(bin = .2, fill = "white", col = "black",  aes(y = ..density..)) +
geom_density(alpha = .2, fill = "cornflowerblue") +  # creates light blue density overlay
# add a normal curve using the mean and sd values from the exponential dist simulated
stat_function(fun = dnorm, arg = list(mean = (1/lambda), sd = (1/lambda)/sqrt(40)), col = "red", size = 1.4) +
geom_vline(xintercept = 5, colour = "blue", size = 1.5) +  #adds a verticle line at the mean
ggtitle("Probability histogram of 1000 simulated exponential sample means") + xlab("Mean of sample") +
ylab("Density") + theme_gray(base_size = 18)
g
g <- ggplot(means_df, aes(x = means_array)) + geom_histogram(bin = .3, fill = "white", col = "black",  aes(y = ..density..)) +
geom_density(alpha = .2, fill = "cornflowerblue") +  # creates light blue density overlay
# add a normal curve using the mean and sd values from the exponential dist simulated
stat_function(fun = dnorm, arg = list(mean = (1/lambda), sd = (1/lambda)/sqrt(40)), col = "red", size = 1.4) +
geom_vline(xintercept = 5, colour = "blue", size = 1.5) +  #adds a verticle line at the mean
ggtitle("Probability histogram of 1000 simulated exponential sample means") + xlab("Mean of sample") +
ylab("Density") + theme_gray(base_size = 12)
g
g <- ggplot(means_df, aes(x = means_array)) + geom_histogram(bin = .05, fill = "white", col = "black",  aes(y = ..density..)) +
geom_density(alpha = .2, fill = "cornflowerblue") +  # creates light blue density overlay
# add a normal curve using the mean and sd values from the exponential dist simulated
stat_function(fun = dnorm, arg = list(mean = (1/lambda), sd = (1/lambda)/sqrt(40)), col = "red", size = 1.4) +
geom_vline(xintercept = 5, colour = "blue", size = 1.5) +  #adds a verticle line at the mean
ggtitle("Probability histogram of 1000 simulated exponential sample means") + xlab("Mean of sample") +
ylab("Density") + theme_gray(base_size = 12)
g
g <- ggplot(means_df, aes(x = means_array)) + geom_histogram(bin = .2, fill = "white", col = "black",  aes(y = ..density..)) +
geom_density(alpha = .2, fill = "cornflowerblue") +  # creates light blue density overlay
# add a normal curve using the mean and sd values from the exponential dist simulated
stat_function(fun = dnorm, arg = list(mean = (1/lambda), sd = (1/lambda)/sqrt(40)), col = "red", size = 1.4) +
geom_vline(xintercept = 5, colour = "blue", size = 1.5) +  #adds a verticle line at the mean
ggtitle("Probability histogram of 1000 simulated exponential sample means") + xlab("Mean of sample") +
ylab("Density") + theme_gray(base_size = 12)
g
means_array <- replicate(expr = mean(rexp(n, lambda)), n = nosim, simplify = "array")
```
<br>
#### Plotting the sample means
To visualize the disribution of the 1000 mean values I now had stored in the array, I plotted the 1000 mean values in a probability histogram using ggplot2.   I chose to use a bin size of 0.2 after experimenting with different values and finding this size gave good definition of the shape of the distribution of means.
To make it easier to compare wether the probability histogram is normally distributed, I overlayed a a density polygon, which represents the overal probability 'curve' of the sample means. This curve can be visually compared with the normal curve I generated (red) using the mean of the exponential distribution (1/Î») and the standard deviation of the distribution for 40 samples.  I also overlayed a vertical line showing the expected mean (blue).
```{r, echo = T}
means_df <- as.data.frame(means_array) # create a data frame to use for plotting
library(ggplot2)
g <- ggplot(means_df, aes(x = means_array)) + geom_histogram(bin = .2, fill = "white", col = "black",  aes(y = ..density..)) +
geom_density(alpha = .2, fill = "cornflowerblue") +  # creates light blue density overlay
# add a normal curve using the mean and sd values from the exponential dist simulated
stat_function(fun = dnorm, arg = list(mean = (1/lambda), sd = (1/lambda)/sqrt(40)), col = "red", size = 1.4) +
geom_vline(xintercept = 5, colour = "blue", size = 1.5) +  #adds a verticle line at the mean
ggtitle("Probability histogram of 1000 simulated exponential sample means") + xlab("Mean of sample") +
ylab("Density") + theme_gray(base_size = 12)
g
summary
qplot(x = summary$dose, y = summary$tooth_length, factor(summary$supplement), color = summary$supplement) +
geom_point(size = 4) + geom_line(colors = summary$supplement, lwd = .8) +
theme_gray(base_size = 16) + ggtitle("Mean tooth growth when supplemented") +
xlab("supplement dose") + ylab("tooth length") +
theme(legend.text = element_text(size = 16)) +
scale_colour_discrete(name ="Supplement") # changes legend title
g <- qplot(x = summary$dose, y = summary$tooth_length, factor(summary$supplement), color = summary$supplement) +
geom_point(size = 4) + geom_line(colors = summary$supplement, lwd = .8) +
theme_gray(base_size = 16) + ggtitle("Mean tooth growth when supplemented") +
xlab("Supplement dose (mgs of vitamin C)") + ylab("Tooth length (microns)") +
theme(legend.text = element_text(size = 14)) +
scale_colour_discrete(name ="Supplement") # changes legend title
g
library(ggplot2)
g <- qplot(x = summary$dose, y = summary$tooth_length, factor(summary$supplement), color = summary$supplement) +
geom_point(size = 4) + geom_line(colors = summary$supplement, lwd = .8) +
theme_gray(base_size = 16) + ggtitle("Mean guinea pig tooth growth for different supplement regimes") +
xlab("Supplement dose (mgs of vitamin C)") + ylab("Tooth length (microns)") +
theme(legend.text = element_text(size = 14)) +
scale_colour_discrete(name ="Supplement") # changes legend title
g
test_summary <- data.frame(dose = c(0.5, 1.0, 2.0), mean = c(0,0,0), conf1 = c(0,0,0), conf2 = c(0,0,0), p_value = c(0,0,0))
test_summary
temp_results
temp_results <- t.test(len ~ supp, data = ToothGrowth[ToothGrowth$dose == 2.0,], alternative = "two.sided", paired = F, var.equal = F)
test_summary$p_value[3] <- round(temp_results$p.value, digits = 3)  # adding p value to results data frame
temp_results
temp_results$conf.int
g1 <- ToothGrowth$len[21 : 30]; g2 <- ToothGrowth$len[51 : 60]
difference <- g2 - g1
test_summary$mean[3] <- mean(difference); s <- sd(difference); n <- 10
round(test_summary$mean[3] + c(-1, 1) * qt(.975, n-1) * s / sqrt(n), digits = 2)
n
g1 <- ToothGrowth$len[1 : 10]; g2 <- ToothGrowth$len[31 : 40]; n <- 10
test_summary$mean[1] <- mean(g2 - g1)
test_summary[1, 3:4] <- round(mean(g2 - g1) + c(-1, 1) * qt(.975, n-1) * sd(g2 - g1) / sqrt(n), digits = 2)
# 1.0 dose level
g1 <- ToothGrowth$len[11 : 20]; g2 <- ToothGrowth$len[41 : 50]
test_summary$mean[2] <- mean(difference)
test_summary[2, 3:4] <- round(mean(g2 - g1) + c(-1, 1) * qt(.975, n-1) * sd(g2 - g1) / sqrt(n), digits = 2)
# 2.0 dose level
g1 <- ToothGrowth$len[21 : 30]; g2 <- ToothGrowth$len[51 : 60]
test_summary$mean[3] <- mean(difference)
test_summary[3, 3:4] <- round(mean(g2 - g1) + c(-1, 1) * qt(.975, n-1) * sd(g2 - g1) / sqrt(n), digits = 2)
# Report calculated means and confidence intervals
test_summary
temp_results <- t.test(len ~ supp, data = ToothGrowth[ToothGrowth$dose == 0.5,], alternative = "two.sided", paired = F, var.equal = F)
test_summary$p_value[1] <- round(temp_results$p.value, digits = 4)  # adding p value to results data frame
temp_results <- t.test(len ~ supp, data = ToothGrowth[ToothGrowth$dose == 1.0,], alternative = "two.sided", paired = F, var.equal = F)
test_summary$p_value[2] <- round(temp_results$p.value, digits = 4)  # adding p value to results data frame
temp_results <- t.test(len ~ supp, data = ToothGrowth[ToothGrowth$dose == 2.0,], alternative = "two.sided", paired = F, var.equal = F)
test_summary$p_value[3] <- round(temp_results$p.value, digits = 4)  # adding p value to results data frame
temp_results$conf.int
test_summary
temp_results <- t.test(len ~ supp, data = ToothGrowth[ToothGrowth$dose == 0.5,], alternative = "two.sided", paired = F, var.equal = F)
test_summary$p_value[1] <- round(temp_results$p.value, digits = 3)  # adding p value to results data frame
temp_results <- t.test(len ~ supp, data = ToothGrowth[ToothGrowth$dose == 1.0,], alternative = "two.sided", paired = F, var.equal = F)
test_summary$p_value[2] <- round(temp_results$p.value, digits = 3)  # adding p value to results data frame
temp_results <- t.test(len ~ supp, data = ToothGrowth[ToothGrowth$dose == 2.0,], alternative = "two.sided", paired = F, var.equal = F)
test_summary$p_value[3] <- round(temp_results$p.value, digits = 3)  # adding p value to results data frame
temp_results$conf.int
test_summary
g1 <- ToothGrowth$len[11 : 20]; g2 <- ToothGrowth$len[41 : 50]
test_summary$mean[2] <- mean(g2 - g1)
test_summary[2, 3:4] <- round(mean(g2 - g1) + c(-1, 1) * qt(.975, n-1) * sd(g2 - g1) / sqrt(n), digits = 2)
# 2.0 dose level
g1 <- ToothGrowth$len[21 : 30]; g2 <- ToothGrowth$len[51 : 60]
test_summary$mean[3] <- mean(g2 - g1)
test_summary[3, 3:4] <- round(mean(g2 - g1) + c(-1, 1) * qt(.975, n-1) * sd(g2 - g1) / sqrt(n), digits = 2)
test_summary
test_summary <- data.frame(dose = c(0.5, 1.0, 2.0), mean_diff = c(0,0,0), conf1 = c(0,0,0), conf2 = c(0,0,0), p_value = c(0,0,0))
temp_results <- t.test(len ~ supp, data = ToothGrowth[ToothGrowth$dose == 0.5,], alternative = "two.sided", paired = F, var.equal = F)
test_summary$p_value[1] <- round(temp_results$p.value, digits = 3)  # adding p value to results data frame
temp_results <- t.test(len ~ supp, data = ToothGrowth[ToothGrowth$dose == 1.0,], alternative = "two.sided", paired = F, var.equal = F)
test_summary$p_value[2] <- round(temp_results$p.value, digits = 3)  # adding p value to results data frame
temp_results <- t.test(len ~ supp, data = ToothGrowth[ToothGrowth$dose == 2.0,], alternative = "two.sided", paired = F, var.equal = F)
test_summary$p_value[3] <- round(temp_results$p.value, digits = 3)  # adding p value to results data frame
temp_results$conf.int
test_summary
test_summary
dim(test_summary)
table <- xtable(test_summary) #, align = c("c","c","c","c","c"))
print(table, type="html", include.rownames = FALSE)
dim(test_summary)
table <- xtable(test_summary, align = rep("c", 6))
print(table, type="html", include.rownames = FALSE)
names(test_summary)
names(test_summary) <- c(" dose ", " mean_diff ", " conf1 ", " conf2 ", " p_value ")
library(xtable)
table <- xtable(test_summary, align = rep("c", 7))
print(table, type="html", include.rownames = FALSE)
g <- qplot(x = summary$dose, y = summary$tooth_length, factor(summary$supplement), color = summary$supplement) +
geom_point(size = 4) + geom_line(colors = summary$supplement, lwd = .8) +
theme_gray(base_size = 16) + ggtitle("Mean tooth growth for different supplement regimes")+
xlab("Supplement dose (mgs of vitamin C)") + ylab("Tooth length (microns)") +
theme(legend.text = element_text(size = 14)) +
scale_colour_discrete(name ="Supplement") # changes legend title
g
summary <- aggregate(ToothGrowth$len ~ ToothGrowth$supp + ToothGrowth$dose, FUN = "mean")
names(summary) <- c("supplement", "dose","tooth_length")
summary
g <- qplot(x = summary$dose, y = summary$tooth_length, factor(summary$supplement), color = summary$supplement) +
geom_point(size = 4) + geom_line(colors = summary$supplement, lwd = .8) +
theme_gray(base_size = 16) + ggtitle("Mean tooth growth for different supplement regimes")+
xlab("Supplement dose (mgs of vitamin C)") + ylab("Tooth length (microns)") +
theme(legend.text = element_text(size = 14)) +
scale_colour_discrete(name ="Supplement") # changes legend title
g
ggplot(x = summary$dose, y = summary$tooth_length, factor(summary$supplement), color = summary$supplement) +
geom_point(size = 4) +
geom_line(colors = summary$supplement, lwd = .8) +
theme_gray(base_size = 16) + ggtitle("Mean tooth growth for different supplement regimes")+
xlab("Supplement dose (mgs of vitamin C)") + ylab("Tooth length (microns)") +
theme(legend.text = element_text(size = 14)) +
scale_colour_discrete(name ="Supplement") # changes legend title
ToothGrowth$dose <- as.numeric(ToothGrowth$dose)
ggplot(x = summary$dose, y = summary$tooth_length, factor(summary$supplement), color = summary$supplement) +
geom_point(size = 4) +
geom_line(colors = summary$supplement, lwd = .8) +
theme_gray(base_size = 16) + ggtitle("Mean tooth growth for different supplement regimes")+
xlab("Supplement dose (mgs of vitamin C)") + ylab("Tooth length (microns)") +
theme(legend.text = element_text(size = 14)) +
scale_colour_discrete(name ="Supplement") # changes legend title
ggplot(x = summary$dose, y = summary$tooth_length, aes(summary$supplement), color = summary$supplement) +
geom_point(size = 4) +
geom_line(colors = summary$supplement, lwd = .8) +
theme_gray(base_size = 16) + ggtitle("Mean tooth growth for different supplement regimes")+
xlab("Supplement dose (mgs of vitamin C)") + ylab("Tooth length (microns)") +
theme(legend.text = element_text(size = 14)) +
scale_colour_discrete(name ="Supplement") # changes legend title
ggplot(summary, aes(dose, tooth_length~ supplement), color = supplement) +
geom_point(size = 4) +
geom_line(colors = summary$supplement, lwd = .8) +
theme_gray(base_size = 16) + ggtitle("Mean tooth growth for different supplement regimes")+
xlab("Supplement dose (mgs of vitamin C)") + ylab("Tooth length (microns)") +
theme(legend.text = element_text(size = 14)) +
scale_colour_discrete(name ="Supplement") # changes legend title
summary
ggplot(summary, aes(x=dose, y= tooth_length), factor(supplement), color = supplement) +
geom_point(size = 4) +
geom_line(colors = summary$supplement, lwd = .8) +
theme_gray(base_size = 16) + ggtitle("Mean tooth growth for different supplement regimes")+
xlab("Supplement dose (mgs of vitamin C)") + ylab("Tooth length (microns)") +
theme(legend.text = element_text(size = 14)) +
scale_colour_discrete(name ="Supplement") # changes legend title
ggplot(summary, aes(x=dose, y= tooth_length), factor(supplement)) +
geom_point(size = 4) +
geom_line(colors = summary$supplement, lwd = .8) +
theme_gray(base_size = 16) + ggtitle("Mean tooth growth for different supplement regimes")+
xlab("Supplement dose (mgs of vitamin C)") + ylab("Tooth length (microns)") +
theme(legend.text = element_text(size = 14)) +
scale_colour_discrete(name ="Supplement") # changes legend title
ggplot(summary, aes(x=dose, y= tooth_length), factor(supplement)) +
geom_point(colour = summary$supplement, size = 4)
ggplot(summary, aes(x=dose, y= tooth_length), factor(supplement)) +
geom_point(colours = summary$supplement, size = 4)
ggplot(summary, aes(x=dose, y=tooth_length), factor(supplement), colours = supplement)
ggplot(summary, aes(x=dose, y=tooth_length), colours = supplement)
ggplot(summary, aes(x=dose, y=tooth_length), factor(supplement), colours = supplement) +
geom_point(colours = summary$supplement, size = 4)
ggplot(summary, aes(x=dose, y=tooth_length), factor(supplement), colours = supplement) +
geom_point(aes($upplement), size = 4)
ggplot(summary, aes(x=dose, y=tooth_length), factor(supplement), colours = supplement) +
geom_point(aes(supplement), size = 4)
ggplot(summary, aes(x=dose, y=tooth_length)) +
geom_point(aes(colour = factor(supplement)), size = 4)
g <- ggplot(summary, aes(x=dose, y=tooth_length)) +
geom_point(aes(colour = factor(supplement)), size = 4) +
geom_line(colors = summary$supplement, lwd = .8) +
theme_gray(base_size = 16) + ggtitle("Mean tooth growth for different supplement regimes")+
xlab("Supplement dose (mgs of vitamin C)") + ylab("Tooth length (microns)") +
theme(legend.text = element_text(size = 14)) +
scale_colour_discrete(name ="Supplement") # changes legend title
g
ggplot(summary, aes(x=dose, y=tooth_length)) +
geom_point(aes(colour = factor(supplement)), size = 4) +
geom_line(aes(colour = factor(supplement)), lwd = .8)
g <- ggplot(summary, aes(x=dose, y=tooth_length)) +
geom_point(aes(colour = factor(supplement)), size = 4) +
geom_line(aes(colour = factor(supplement)), lwd = .8) +
theme_gray(base_size = 16) + ggtitle("Mean tooth growth for different supplement regimes")+
xlab("Supplement dose (mgs of vitamin C)") + ylab("Tooth length (microns)") +
theme(legend.text = element_text(size = 14)) +
scale_colour_discrete(name ="Supplement") # changes legend title
g
weather_subset
weather_subset
jlkjf
mean_steps <- tapply(X = activity$steps, INDEX = activity$date, FUN = mean, simplify = T)
mean_steps_table <- cbind(unique(as.data.frame(activity$date)), mean_steps)
colnames(mean_steps_table) <- c("Date measured","Mean Steps")
mean_steps_table
aggregate(x = activity$steps, by = activity$date, FUN = mean, simplify = T)
mean_steps <- aggregate(x = activity$steps, by = list(activity$date), FUN = mean, simplify = T)
mean_steps
mean_steps <- aggregate(x = activity$steps, by = list(activity$date), FUN = mean, simplify = T, na.rm = T)
mean_steps
mean_steps_table <- aggregate(x = activity$steps, by = list(activity$date), FUN = mean, simplify = T)
colnames(mean_steps_table) <- c("Date measured","Mean Steps")
mean_steps_table
total_steps <- tapply(X = activity$steps, INDEX = activity$date, FUN = sum, simplify = T)
# create the histogram
hist(total_steps, breaks = 40, col="orange",  xlab =("Steps per day"),
ylab = ("Number of days in frequency range"),
main = ("Frequency histogram: total steps taken per day"))
average_per_time <- tapply(X = activity$steps, INDEX =  activity$interval,
FUN = mean, na.rm = TRUE, simplify = TRUE)
# Time intervals to use for graphing
real_time_intervals <- activity$R_time[1:288]
# graph data
plot(real_time_intervals, average_per_time, type = "l", col = "darkviolet", lwd = 2.2,
xlab =("Time interval (minutes)"), ylab = ("Average number of steps"),
cex.main = 1, cex.lab = 1.2)
real_time_intervals
plot(real_time_intervals, average_per_time, type = "l" )#,  col = "darkviolet", lwd = 2.2,
head(activity)
plot(real_time_intervals, average_per_time, type = "l" )#,  col = "darkviolet", lwd = 2.2,
xlab =("Time interval (minutes)"), ylab = ("Average number of steps"),
cex.main = 1, cex.lab = 1.2)
plot(rownames(average_per_time), average_per_time, type = "l" )#,  col = "darkviolet", lwd = 2.2,
xlab =("Time interval (minutes)"), ylab = ("Average number of steps"),
cex.main = 1, cex.lab = 1.2)
# find the max average activitiy: sort interval averages by total number of steps
real_time_intervals <- activity$R_time[1:288]
plot(real_time_intervals, average_per_time, type = "l",  col = "darkviolet", lwd = 2.2,
xlab =("Time interval (minutes)"), ylab = ("Average number of steps"),
cex.main = 1, cex.lab = 1.2)
mean_steps_replacement
median_steps_replacement
median_step_amount
mean_step_amount
mean_step_amount
mean_steps_replacement
median_step_amount
median_steps_replacement
knit2html("PA1_template.Rmd")
all_avg_
activity_no_NAs$is_weekday2 <- ifelse(activity_no_NAs$day_of_week == "Saturday" | activity_no_NAs$day_of_week =="Sunday", "weekend","weekday")  # if x or y, apply weekend,  else apply weekeday
head(activity_no_NAs)
sum(is.na(activity$steps))
unique(weather_subset$PROPDMGEXP)
unique(weather_subset$prop_exponent)
mean_step_amount
median_steps_replacement
mean_step_amount
median_step_amount
rownames(mean_steps)
mean_steps_table <- as.data.frame(rownames(mean_steps), mean_steps)
head(mean_steps_table)
table(agrep(pattern = "low tide", x = weather_subset$event_types, value = T))
weather_subset$event_types <- gsub("/+", " ", weather_subset$event_types)
table(agrep(pattern = "=", x = weather_subset$event_types2, value = T))
table(grep(pattern = "=", x = weather_subset$event_types2, value = T))
table(grep(pattern = "-", x = weather_subset$event_types2, value = T))
table(grep(pattern = "/", x = weather_subset$event_types2, value = T))
table(grep(pattern = "/+", x = weather_subset$event_types2, value = T))
table(grep(pattern = "//", x = weather_subset$event_types2, value = T))
table(grep(pattern = "\", x = weather_subset$event_types2, value = T))
table(grep(pattern = "\\", x = weather_subset$event_types2, value = T))
table(grep(pattern = "\\?", x = weather_subset$event_types2, value = T))
table(grep(pattern = "\\d", x = weather_subset$event_types2, value = T))
weather_subset$event_types <- gsub(" \\d.*$", "",  x=weather_subset$event_types)
table(grep(pattern = "\\d", x = weather_subset$event_types2, value = T))
weather_subset$event_types <- gsub(" \\d.*$", "",  x=weather_subset$event_types2)
table(grep(pattern = "\\d", x = weather_subset$event_types2, value = T))
weather_subset$event_types <- gsub(" \\d.*$", "",  x=weather_subset$event_types2)
weather_subset$event_types2 <- gsub(" \\d.*$", "",  x=weather_subset$event_types2)
table(grep(pattern = "\\d", x = weather_subset$event_types2, value = T))
table(grep(pattern = "\\d", x = weather_subset$event_types2, value = T))
weather_subset$event_types2 <- gsub(" .*\\d.*$", "",  x = weather_subset$event_types2)
table(grep(pattern = "\\d", x = weather_subset$event_types2, value = T))
table(grep(pattern = "\\(", x = weather_subset$event_types2, value = T))
weather_subset$event_types2 <- gsub(" \\(d).*$", "",  x = weather_subset$event_types2)
table(grep(pattern = "\\(", x = weather_subset$event_types2, value = T))
weather_subset$event_types2 <- gsub(" \\(.*$", "",  x = weather_subset$event_types2)
table(grep(pattern = "\\(", x = weather_subset$event_types2, value = T))
weather_subset$event_types2 <- gsub("\\(.*$", "",  x = weather_subset$event_types2)
table(grep(pattern = "\\(", x = weather_subset$event_types2, value = T))
table(grep(pattern = "/", x = weather_subset$event_types2, value = T))
class(activity_no_NAs$is_weekday2)
class(activity_no_NAs$is_weekday)
avg_steps_wkday_wend <- aggregate(x = activity_no_NAs$steps, by = list(activity_no_NAs$is_weekday, activity_no_NAs$interval), FUN = mean, simplify = T)
avg_steps_wkday_wend
library(stats)
avg_steps_wkday_wend
head(avg_steps_wkday_wend)
colnames(avg_steps_wkday_wend) <- c("is_weekend","time_interval","avg_steps")
# I also need to create an altered time interval for graphing, because the integer interval goes 55, 60 - 100,
# (not evenly spaced b/c not true times). Instead i filled the 'time_interval' column with one
head(avg_steps_wkday_wend)
times <- rep(activity$R_time[1:288], 2)
colnames(avg_steps_wkday_wend) <- c("is_weekend","interval","avg_steps")
avg_steps_wkday_wend$time_intervals <- rep(activity$R_time[1:288], 2)
head(rep(activity$R_time[1:288], 2))
head(avg_steps_wkday_wend)
library(ggplot2)
g <- ggplot(data = avg_steps_wkday_wend, aes(x = time_interval, y = avg_steps, group = is_weekend)) +
facet_wrap( ~ is_weekend, ncol = 1) + geom_line(color = "blue", lwd = .8) +
xlab("time (sampled at 5 minute intervals)") + ylab("average number of steps per time interval") +
theme_bw(base_size = 12)
# adding correctly formatted time x axis with package 'scales'
g <- ggplot(data = avg_steps_wkday_wend, aes(x = time_interval, y = avg_steps, group = is_weekend)) +
facet_wrap( ~ is_weekend, ncol = 1) + geom_line(color = "blue", lwd = .8) +
xlab("time (sampled at 5 minute intervals)") + ylab("average number of steps per time interval") +
theme_bw(base_size = 12)
# adding correctly formatted time x axis with package 'scales'
library(scales)
g <- g + scale_x_datetime(breaks = date_breaks("4 hour"), labels = date_format("%H:%M"))
#print the graph
print(g)
g <- ggplot(data = avg_steps_wkday_wend, aes(x = time_interval, y = avg_steps, group = is_weekend)) +
facet_wrap( ~ is_weekend, ncol = 1) + geom_line(color = "blue", lwd = .8) +
xlab("time (sampled at 5 minute intervals)") + ylab("average number of steps per time interval") +
theme_bw(base_size = 12)
g
avg_steps_wkday_wend$time_intervals <- rep(activity$R_time[1:288], 2)
# plot with ggplot, using facet_wrap to create two panels, one for weekdays and one for weekends.
library(ggplot2)
g <- ggplot(data = avg_steps_wkday_wend, aes(x = time_interval, y = avg_steps, group = is_weekend)) +
facet_wrap( ~ is_weekend, ncol = 1) + geom_line(color = "blue", lwd = .8) +
xlab("time (sampled at 5 minute intervals)") + ylab("average number of steps per time interval") +
theme_bw(base_size = 12)
g
activity_no_NAs$is_weekday <- as.factor(activity_no_NAs$is_weekday)
library(ggplot2)
g <- ggplot(data = avg_steps_wkday_wend, aes(x = time_interval, y = avg_steps, group = is_weekend)) +
facet_wrap( ~ is_weekend, ncol = 1) + geom_line(color = "blue", lwd = .8) +
xlab("time (sampled at 5 minute intervals)") + ylab("average number of steps per time interval") +
theme_bw(base_size = 12)
g
ggplot(data = avg_steps_wkday_wend, aes(x = time_interval, y = avg_steps, group = is_weekend)) +
facet_wrap( ~ is_weekend, ncol = 1) + geom_line(color = "blue", lwd = .8)
library(ggplot2)
g <- ggplot(data = all_avg_, aes(x = interval, y = avg_steps, group = is_weekend)) +
facet_wrap( ~ is_weekend, ncol = 1) + geom_line(color = "blue", lwd = .8) +
scale_x_continuous(breaks = seq(0, 2400,200)) + theme_bw(base_size = 13) +
xlab("time (5 minute intervals)") + ylab("steps per interval")
print(g)
ggplot(data = all_avg_, aes(x = interval, y = avg_steps, group = is_weekend)) +
facet_wrap( ~ is_weekend, ncol = 1) + geom_line(color = "blue", lwd = .8) +
scale_x_continuous(breaks = seq(0, 2400,200)) + theme_bw(base_size = 13) +
xlab("time (5 minute intervals)") + ylab("steps per interval")
