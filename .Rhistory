gdp <- read.csv("GDP.csv", header = F, stringsAsFactors = F, skip = 5)
gdp <- gdp[1:190, ]
gdp$V5 <-as.integer(gdp$V5)#" as.integer(gdp$V5)
gdp$V5
gdp$V5 <-as.integer(as.character(gdp$V5))#" as.integer(gdp$V5)
gdp <- read.csv("GDP.csv", header = F, stringsAsFactors = F, skip = 5)
gdp <- gdp[1:190, ]
gdp$V5 <-as.numeric(as.character(gdp$V5))#" as.integer(gdp$V5)
gdp$V5
gdp <- read.csv("GDP.csv", header = F, stringsAsFactors = F, skip = 5)
gdp <- gdp[1:190, ]
gdp$V5 <-as.integer(as.character(gdp$V5))#" as.integer(gdp$V5)
gdp$V5
gdp <- read.csv("GDP.csv", header = F, stringsAsFactors = F, skip = 5)
gdp <- gdp[1:190, ]
class(gdp$V5)
gdp <- gdp[order(gdp$V1, na.last = T),]
head(gdp)
gdps <-gdp[ ,1:2]
final <- gdps[order(gdps$V2, decreasing = T),]
final[13,] #13th is KNA
gdps
final <- gdps[order(gdps$V2, decreasing = T),]
final[13,] #13th is KNA
gdps$V2 <- as.numeric(gdps$V2)
class(gdps$V2)
gdps$V2
final <- gdps[order(gdps$V2, decreasing = T),]
final[13,] #13th is KNA
tapply(X =merged$V1, INDEX = merged$Income.Group, FUN = mean)
merged <- merge(countries, gdps, by.x = "CountryCode", by.y = "V1")
str(merged)
tapply(X = merged$V2, INDEX = merged$Income.Group, FUN = mean)
table(merged$new)
merged$new = cut2(merged$V2, g = 5) #Or g = # of cuts you want
table(merged$new)
table(merged$new,merged$Income.Group)
mymatrix2 <- matrix(rnorm(size^2), nrow=size, ncol=size)
mymatrix.inverse2 <- solve(mymatrix2)
mymatrix2 <- matrix(rnorm(size^2), nrow=size, ncol=size)
mymatrix.inverse2 <- solve(mymatrix2)
mymatrix2 <- matrix(rnorm(size^2), nrow=size, ncol=size)
mymatrix.inverse2 <- solve(mymatrix2)
mymatrix2 <- matrix(rnorm(size^2), nrow=size, ncol=size)
mymatrix.inverse2 <- solve(mymatrix2)
mymatrix2
mymatrix2 <- matrix(rnorm(size^2), nrow=size, ncol=size)
mymatrix2
mymatri2 <- matrix(rnorm(size^2), nrow=size, ncol=size)
mymatrix2
mymatri2 <- matrix(rnorm(size^2), nrow=size, ncol=size)
mymatri2
mymatrix2 <- matrix(rnorm(100^2), nrow=100, ncol=100)
mymatrix2
mymatrix.inverse2 <- solve(mymatrix2)
# Change the matrix inside special.matrix to mymatrix2
special.matrix$set(mymatrix2)
library(datasets) #loads the built in data sets
data(mtcars) #loads dataframe cars
with(mtcars, tapply(hp, cyl))
with(mtcars, tapply(hp, cyl, difference))
with(mtcars, tapply(hp, cyl, mean))
meanhp <- with(mtcars, tapply(hp, cyl, mean))
str(meanhp)
meanhp["6"]
meanhp["8"] - meanhp["4"]
meanhp <- with(mtcars, tapply(hp, cyl, mean))
(meanhp)
meanhp["8"] - meanhp["4"]
meanhp["8"] - meanhp["4"]
meanhp[3] - meanhp[1]
library(datasets)
data(iris)
iris
means <- sapply(iris, FUN = mean)
sapply(iris$Species, FUN = range)
means <- sapply(iris, FUN = mean)
sapply(iris$Species, FUN = range)
table(means, sapply(iris$ iris$species)
table(means, sapply(iris$ iris$species)()
table(means, sapply(iris$ iris$species)
)
tapply(iris$Sepal.Length, iris$Species, mean))
tapply(iris$Sepal.Length, iris$Species, mean)
library(quantmod)
install.packages(quantmod)
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
head(amzn)
sampleTimes = index(amzn)
head(sampleTimes)
splittimes <- strsplit(sampleTimes, split = "-")
splittimes <- strsplit(sampleTimes, split = "\\-")
splittimes <- strsplit(sampleTimes, split = "\-")
count(grepl(pattern = "2012-")
count(grepl(pattern = "2012-"))
count(grepl(pattern = "2012-"))
count(grepl(sampleTimes, pattern = "2012-"))
grepl(sampleTimes, pattern = "2012-")
table(grepl(sampleTimes, pattern = "2012-"))
table(grepl(sampleTimes, pattern = "2013-"))
head(sampleTimes)
head(amzn)
head(sampleTimes, n = 12)
head(amzn, n=12)
2013s <- grep(sampleTimes, pattern = "2013-")
twothir <- grep(sampleTimes, pattern = "2013-")
twothir
twothir <- grep(sampleTimes, pattern = "2013-", value = T)
twothir
twothir <- as.data.frame(twothir)
twothir
table(grepl(sampleTimes, pattern = "2013-"))
two12 <- grep(sampleTimes, pattern = "2012-", value = T)
table(grepl(sampleTimes, pattern = "2012-"))
two12 <- grep(sampleTimes, pattern = "2012-", value = T)
two12 <- as.data.frame(two12)
two12
gdp <- read.csv("GDP.csv", header = F, stringsAsFactors = F, skip = 5)
countries <- read.csv("Country.csv", header = T, stringsAsFactors = F)
str(gdp)
gdp$V5 <-as.integer(gdp$V5)#" as.integer(gdp$V5)
names(gdp)
head(gdp)
head(gdp)
gdp <- gdp[1:190, ]
head(gdp)
gdp <- read.csv("GDP.csv", header = F, stringsAsFactors = F, skip = 5)
head(gdp)
gdp <- gdp[1:190, ]
head(gdp)
gdp$V5
head(gdp)
gdp$gdp <- gsub(gdp$V5, pattern = ",", replacement = "", fixed = T)
head(gdp)
class(gdp)
class(gdp$gdp)
gdp$gdp <- as.numeric(gdp$gdp)
class(gdp$gdp)
sapply(gdp, mean)
head(gdp)
grep("^United",gdp$V4), 3
grep("^United", gdp$V4)
grep("^United", gdp$V4, value = T)
grep("United$",gdp$V4)
grep("United$",gdp$V4, value = T)
grep("*United",gdp$V4, value = T)
grep("*United",gdp$V4, value = T)
head(gdp$V1)
head(countries$CountryCode)
gdp <- gdp[order(gdp$V1, na.last = T),]
countries <- countries[order(countries$CountryCode, na.last = T),]
head(gdp$V1)
head(countries$CountryCode)
gdps <-gdp[ ,1:2]
gdps
merged <- merge(countries, gdps, by.x = "CountryCode", by.y = "V1")
head(merged)
head(gdps)
merged <- merge(countries, gdps, by.x = "CountryCode", by.y = "V1")
head(merged)
names(merged)
head(gdp)
head(countries)
names(merged)
str(merged)
fiscial <- merged$Special.Notes[, 2:]
fiscial <- merged$Special.Notes[, 2:189]
fiscial <- merged$Special.Notes[2:189, ]
fiscial <- merged$Special.Notes[2:189]
fiscial
grep("*June",fiscial, value = T)
grep("* end: June",fiscial, value = T)
grep("end: June",fiscial, value = T)
plot(airquality)
par(mar)?
par(mar = c(5,4,4,2))
par(mar = c(5,4,4,2))
plot(airquality)
library(datasets)
data(airquality)
summary(airquality)
set.seed(1)
x <- rnorm(100)
mean(x)
library(xtable)
xt <- xtable(summary(fit))
library(stats)
fit <- lm(Ozone ~ Wind + Solar.R + Temp, data = airquality)
summary(fit)
install.packages("xtable")
```{r}
library(datasets)
summary(airquality)
time <- format(Sys.time(), "%a %b %d %X %Y")
rand <- rnorm(1)
pairs(airquality)
par(mar = c(5,4,1,1), las = 1)
plot(airquality$Wind, airquality$Ozone, main = "Ozone vs Wind")
library(stats)
fit <- lm(Ozone ~ Wind + Solar.R + Temp, data = airquality)
summary(fit)
library(xtable)
xt <- xtable(summary(fit))
print(xt, type="html")
set.seed(1)
x <- rnorm(100)
mean(x)
set.seed(3)
x <- rnorm(100)
mean(x)
setwd("/Users/Natalia/Coding/Reproducible_Research/RepData_PeerAssessment1/")
# load with read.csv()
activity <- read.csv("activity.csv", header = T)
library(stringr)
activity$time <- str_pad(activity$interval, 4, pad = "0")
# join time and date together, then process
activity$datetime <- paste(activity$date, activity$time)
activity$R_time <- strptime(activity$datetime, format = "%Y-%m-%d %H%M")
mean_steps <- tapply(X = activity$steps, INDEX = activity$date, FUN = mean, simplify = T)
mean_steps_table <- cbind(unique(as.data.frame(activity$date)), mean_steps)
# the data frame needs nice column names
colnames(mean_steps_table) <- c("Date measured","Mean Steps")
table <- xtable(mean_steps_table, align = c("c","c","c"))
print(table, type="html", include.rownames = FALSE)
total_steps <- tapply(X = activity$steps, INDEX = activity$date, FUN = sum, simplify = T)
# create the histogram
hist(total_steps, breaks = 40, col="orange",  xlab =("Steps per day"), ylab = ("Number of days in frequency range"), main = ("Frequency histogram: total steps taken per day"))
```
<br>
mean_step_amount <- as.integer(mean(total_steps, na.rm = TRUE))
median_step_amount <- median(total_steps, na.rm = TRUE)
# the average step values per time interval
average_per_time <- tapply(X = activity$steps, INDEX =  activity$interval, FUN = mean, na.rm = TRUE, simplify = TRUE)
# Time intervals to use for graphing
real_time_intervals <- activity$R_time[1:288]
plot(real_time_intervals, average_per_time, type = "l", col = "darkviolet", lwd = 2.2,  xlab =("Time interval (minutes)"), ylab = ("Average number of steps"), cex.main = 1, cex.lab = 1.2, xaxt = "n")
# adding an x axis with tick intervals that are more releveant for time interval than default ticks
axis(side = 1, at = c(0,200,400,600,800,1000,1200,1400,1600,1800,2000,2200,2400))
# find the max average activitiy: sort interval averages by total number of steps
max_num_steps <- max(average_per_time)
# and find and record the time interval at which this max number of steps occured
max_interval <- names(average_per_time[average_per_time == max_num_steps])
is_an_na <- is.na(activity$steps)
# then measure the number of items the logical vector that were TRUE (ie were NA values)
number_na <- length(is_an_na[is_an_na == TRUE])
```
averages <- data.frame(rownames(average_per_time), average_per_time)
colnames(averages) <- c("interval", "average_steps")
# making a new data set  with activity data. the NAs in this will be filled in, leaving the original activity data set untouched
activity_no_NAs <- activity
# keep track of how many NAs were replaced
count_replaced <- 0
# store length of dataset for the for-loop
length_data <- length(activity_no_NAs$steps)
for (x in (1:length_data)) {
if (is.na(activity_no_NAs$steps[x]) == TRUE) {
replacment_value <- (averages$average_steps[averages$interval == activity_no_NAs$interval[x]])
activity_no_NAs$steps[x] <-  as.vector(replacment_value)
count_replaced <<- count_replaced + 1
}
}
## checks: were the correct number of NAs were found and replaced?  (there were 2304 NA values)
print(count_replaced)
total_steps_replacement <- tapply(X = activity_no_NAs$steps, INDEX = activity_no_NAs$date, FUN = sum, simplify = T)
# finding the mean and median number of steps taken each day
mean_steps_replacement <- as.integer(mean(total_steps_replacement))
median_steps_replacement <- median(total_steps_replacement)
activity_no_NAs$day_of_week <- weekdays(activity_no_NAs$R_time)
# then i created a new column in the dataset to record whether a day was a weekend
activity_no_NAs$is_weekday <- character(length = length_data)
# I used the day of week to assign a label of "weekday" or "weekend" in a new column
for (x in (1:length_data)) {
if (activity_no_NAs$day_of_week[x] %in% c("Saturday","Sunday")) {
activity_no_NAs$is_weekday[x] <- "weekend"
} else {
activity_no_NAs$is_weekday[x] <- "weekday"
}
}
# convert is_weekday column to a factor variable
activity_no_NAs$is_weekday <- as.factor(activity_no_NAs$is_weekday)
average_weekday_steps <- tapply(X = activity_no_NAs$steps[activity_no_NAs$is_weekday=="weekday"], INDEX = activity_no_NAs$interval[activity_no_NAs$is_weekday=="weekday"], FUN = mean, simplify = T)
average_wkend_steps <- tapply(X = activity_no_NAs$steps[activity_no_NAs$is_weekday=="weekend"], INDEX = activity_no_NAs$interval[activity_no_NAs$is_weekday=="weekend"], FUN = mean, simplify = T)
# put into a data frame for weekdays, and add a column specifiying values from weekday
steps_weekday <- data.frame(as.integer(rownames(average_weekday_steps)), average_weekday_steps)
colnames(steps_weekday) <- c("interval", "avg_steps")
steps_weekday$is_weekend <- "weekday"
# put into a data frame for wkends, and add a column specifiying values from weekend
steps_weekend <- data.frame(as.integer(rownames(average_wkend_steps)), average_wkend_steps)
colnames(steps_weekend) <- c("interval", "avg_steps")
steps_weekend$is_weekend <- "weekend"
#row bind the two dataframes together. now have averages and cagtegorical weekday/weekend var
all_avg_ <- rbind(steps_weekday, steps_weekend)
# plot with ggplot, using facet_wrap to create two panels
library(ggplot2)
g <- ggplot(data = all_avg_, aes(x = interval, y = avg_steps, group = is_weekend)) +
facet_wrap( ~ is_weekend, ncol = 1) + geom_line(color = "blue", lwd = .8) +
scale_x_continuous(breaks = seq(0, 2400,200)) + theme_bw(base_size = 13) +
xlab("time (5 minute intervals)") + ylab("steps per interval")
print(g)
5*12*24
seq(0, 1440, 5)
lenghth(all_avg_)
length(all_avg_)
length(all_avg_$interval)
rep(seq(0, 1440, 5), 2)
length(all_avg_$interval)
head(all_avg_$interval)
seq(0, 1440, 5)
length(all_avg_$interval)
seq(0, 2880, 5)
tail(all_avg_$interval)
seq(0, 2875, 5)
length(seq(0, 2875, 5))
length(seq(0, 1435))
length(seq(0, 1435, 5))
length(all_avg_$interval)
length(all_avg_$interval)/2
rep(seq(0, 1435, 5),2)
length(rep(seq(0, 1435, 5),2))
head(all_avg_$interval)
length(all_avg_$interval)/2
length(all_avg_$interval)
length(average_weekday_steps)
length(average_weekend_steps)
length(average_wkend_steps)
all_avg_$fixed_interval <- rep(seq(0, 1435, 5),2)
g <- ggplot(data = all_avg_, aes(x = fixed_interval, y = avg_steps, group = is_weekend)) +
facet_wrap( ~ is_weekend, ncol = 1) + geom_line(color = "blue", lwd = .8) +
scale_x_continuous(breaks = seq(0, 2400,200)) + theme_bw(base_size = 13) +
xlab("time (5 minute intervals)") + ylab("steps per interval")
print(g)
length(all_avg_$interval)/2
all_avg_$time_interval <- rep(activity$R_time[1:288], 2)
table(all_avg_$time_interval)
str(all_avg_$time_interval)
g <- ggplot(data = all_avg_, aes(x = time_interval, y = avg_steps, group = is_weekend)) +
facet_wrap( ~ is_weekend, ncol = 1) + geom_line(color = "blue", lwd = .8) +
scale_x_continuous(breaks = seq(0, 2400,200)) + theme_bw(base_size = 13) +
xlab("time (5 minute intervals)") + ylab("steps per interval")
print(g)
g <- ggplot(data = all_avg_, aes(x = time_interval, y = avg_steps, group = is_weekend)) +
facet_wrap( ~ is_weekend, ncol = 1) + geom_line(color = "blue", lwd = .8) + theme_bw(base_size = 13) +
xlab("time (5 minute intervals)") + ylab("steps per interval")
print(g)
all_avg_$time_interval <- as.POSIXlt.Date(rep(activity$R_time[1:288], 2), format = "%H:%M")
all_avg_$time_interval <- as.POSIXct(rep(activity$R_time[1:288], 2), format = "%H:%M")
head(all_avg_$time_interval)
g <- ggplot(data = all_avg_, aes(x = time_interval, y = avg_steps, group = is_weekend)) +
facet_wrap( ~ is_weekend, ncol = 1) + geom_line(color = "blue", lwd = .8) + theme_bw(base_size = 13) +
xlab("time (5 minute intervals)") + ylab("steps per interval") + scale_x_datetime(breaks = date_breaks("1 hour"))
print(g)
library(scales)
g <- g + scale_x_datetime(breaks = date_breaks("1 hour"), labels = date_format("%H:%M"))
print(g)
g <- ggplot(data = all_avg_, aes(x = time_interval, y = avg_steps, group = is_weekend)) +
facet_wrap( ~ is_weekend, ncol = 1) + geom_line(color = "blue", lwd = .8) + theme_bw(base_size = 13) +
xlab("time (5 minute intervals)") + ylab("steps per interval") +
library(scales)
g <- g + scale_x_datetime(breaks = date_breaks("4 hour"), labels = date_format("%H:%M"))
g <- g + scale_x_datetime(breaks = date_breaks("4 hour"), labels = date_format("%H:%M"))
print(g)
g <- ggplot(data = all_avg_, aes(x = time_interval, y = avg_steps, group = is_weekend)) +
facet_wrap( ~ is_weekend, ncol = 1) + geom_line(color = "blue", lwd = .8) + theme_bw(base_size = 13) +
xlab("time (5 minute intervals)") + ylab("steps per interval") +
g <- g + scale_x_datetime(breaks = date_breaks("4 hour"), labels = date_format("%H:%M"))
g + scale_x_datetime(breaks = date_breaks("4 hour"), labels = date_format("%H:%M"))
rm(g)
g <- ggplot(data = all_avg_, aes(x = time_interval, y = avg_steps, group = is_weekend)) +
facet_wrap( ~ is_weekend, ncol = 1) + geom_line(color = "blue", lwd = .8) + theme_bw(base_size = 13) +
xlab("time (5 minute intervals)") + ylab("steps per interval") +
g + scale_x_datetime(breaks = date_breaks("4 hour"), labels = date_format("%H:%M"))
g <- ggplot(data = all_avg_, aes(x = time_interval, y = avg_steps, group = is_weekend)) +
facet_wrap( ~ is_weekend, ncol = 1) + geom_line(color = "blue", lwd = .8) + theme_bw(base_size = 13) +
xlab("time (5 minute intervals)") + ylab("steps per interval") +
# adding correctly formatted time x axis with package scales
library(scales)
g + scale_x_datetime(breaks = date_breaks("4 hour"), labels = date_format("%H:%M"))
rm(g)
g <- ggplot(data = all_avg_, aes(x = time_interval, y = avg_steps, group = is_weekend)) +
facet_wrap( ~ is_weekend, ncol = 1) + geom_line(color = "blue", lwd = .8) + theme_bw(base_size = 13) +
xlab("time (5 minute intervals)") + ylab("steps per interval") +
g <- g + scale_x_datetime(breaks = date_breaks("4 hour"), labels = date_format("%H:%M"))
rm(g)
g <- ggplot(data = all_avg_, aes(x = time_interval, y = avg_steps, group = is_weekend)) +
facet_wrap( ~ is_weekend, ncol = 1) + geom_line(color = "blue", lwd = .8) + theme_bw(base_size = 13) +
xlab("time (5 minute intervals)") + ylab("steps per interval")
# adding correctly formatted time x axis with package scales
library(scales)
g <- g + scale_x_datetime(breaks = date_breaks("4 hour"), labels = date_format("%H:%M"))
#print the graph
print(g)
g <- g + scale_x_datetime(breaks = date_breaks("3 hour"), labels = date_format("%H:%M"))
print(g)
g <- g + scale_x_datetime(breaks = date_breaks("4 hour"), labels = date_format("%H:%M"))
#print the graph
print(g)
plot(real_time_intervals, average_per_time, type = "l", col = "darkviolet", lwd = 2.2,  xlab =("Time interval (minutes)"), ylab = ("Average number of steps"), cex.main = 1, cex.lab = 1.2, xaxt = "n")
# adding an x axis with tick intervals that are more releveant for time interval than default ticks
axis(side = 1, at = c(0,200,400,600,800,1000,1200,1400,1600,1800,2000,2200,2400))
axis(side = 1, at = c(0,200,400,600,800,1000,1200,1400,1600,1800,2000,2200,2400))
plot(real_time_intervals, average_per_time, type = "l", col = "darkviolet", lwd = 2.2,  xlab =("Time interval (minutes)"), ylab = ("Average number of steps"), cex.main = 1, cex.lab = 1.2, xaxt = "n")
# adding an x axis with tick intervals that are more releveant for time interval than default ticks
axis(side = 1, at = c(0,200,400,600,800,1000,1200,1400,1600,1800,2000,2200,2400))
axis(side = 1, at = c(0,200,400,600,800,1000,1200,1400,1600,1800,2000,2200,2400))
plot(real_time_intervals, average_per_time, type = "l", col = "darkviolet", lwd = 2.2,  xlab =("Time interval (minutes)"), ylab = ("Average number of steps"), cex.main = 1, cex.lab = 1.2, xaxt = "n")
axis(side = 1, at = c(0,200,400,600,800,1000,1200,1400,1600,1800,2000,2200,2400))
axis(side = 4, at = c(0,200,400,600,800,1000,1200,1400,1600,1800,2000,2200,2400))
axis(side = 3, at = c(0,200,400,600,800,1000,1200,1400,1600,1800,2000,2200,2400))
axis(side = 1, at = c(0,200,400,600,800,1000,1200,1400,1600,1800,2000,2200,2400))
axis(side = 1, at = c(breaks = date_breaks("4 hour"), labels = date_format("%H:%M")))
plot(real_time_intervals, average_per_time, type = "l", col = "darkviolet", lwd = 2.2,  xlab =("Time interval (minutes)"), ylab = ("Average number of steps"), cex.main = 1, cex.lab = 1.2) #, xaxt = "n")
avg_steps <- c(average_weekday_steps,average_wkend_steps)
head(avg_steps)
avg_steps <- as.vector(c(average_weekday_steps,average_wkend_steps))
head(avg_steps)
is_weekend <- c(rep("weekday", 2),rep("weekend", 2))
length(all_avg_$interval)
length(all_avg_$interval)/2
is_weekend <- c(rep("weekday", 288),rep("weekend", 288))
str(is_weekend)
is_weekend <- as.factor(c(rep("weekday", 288),rep("weekend", 288)))
str(is_weekend)
all_avg <- cbind(avg_steps, is_weekend)
head(all_avg)
is_weekend <- c(rep("weekday", 288),rep("weekend", 288))
all_avg <- cbind(avg_steps, is_weekend)
head(all_avg)
avg_steps <- as.vector(c(average_weekday_steps,average_wkend_steps))
#create a vector of matcing weekday/weekend lables
is_weekend <- c(rep("weekday", 288), rep("weekend", 288))
# used column bind to create a data frame to graph with
all_avg_ <- cbind(avg_steps, is_weekend)
# I also need to create an  altered  time interval for graphing, because the integer interval goes 55, 60, 100, 105 (not evenly spaced b/c not true times).  Instead i filled the 'time_interval' column with one full day's times values from my pre-processed r-time values. I repeated this twice (one full 24 hrs for graphing weekend, and one full day of 24hrs for graphing weekedays)
all_avg_$time_interval <- as.POSIXct(rep(activity$R_time[1:288], 2), format = "%H:%M")
all_avg_$time_interval <- as.POSIXct(c(rep(activity$R_time[1:288], 2), format = "%H:%M"))
times <- rep(activity$R_time[1:288], 2)
str(times)
str(all_avg_)
all_avg_ <- cbind(avg_steps, is_weekend)
str(all_avg_)
str(is_weekend)
str(avg_steps)
all_avg_ <- as.data.frame(cbind(avg_steps, is_weekend))
str(is_weekend)
str(avg_steps)
str(all_avg_)
times <- rep(activity$R_time[1:288], 2)
str(times)
all_avg_$time_interval <- times
str(all_avg_)
avg_steps <- as.numeric(c(average_weekday_steps,average_wkend_steps))
#create a vector of matcing weekday/weekend lables
is_weekend <- c(rep("weekday", 288), rep("weekend", 288))
all_avg_ <- as.data.frame(cbind(avg_steps, is_weekend))
str(is_weekend)
str(avg_steps)
str(all_avg_)
str(avg_steps)
all_avg_ <- as.data.frame(cbind(as.numeic(avg_steps), is_weekend))
all_avg_ <- as.data.frame(cbind(as.numeric(avg_steps), is_weekend))
str(is_weekend)
str(avg_steps)
str(all_avg_)
all_avg_ <- as.data.frame(cbind(avg_steps, is_weekend))
str(is_weekend)
str(avg_steps)
str(all_avg_)
all_avg_$avg_steps <- as.numeric(all_avg_$avg_steps)
str(is_weekend)
str(avg_steps)
str(all_avg_)
avg_steps <- as.data.frame(c(average_weekday_steps,average_wkend_steps))
str(avg_steps)
all_avg_ <- as.data.frame(cbind(avg_steps, is_weekend))
str(all_avg_)
avg_steps <- as.numeric(c(average_weekday_steps,average_wkend_steps))
avg_steps <- as.numeric(c(average_weekday_steps,average_wkend_steps))
avg_steps <- as.data.frame(avg_steps)
#create a vector of matcing weekday/weekend lables
is_weekend <- c(rep("weekday", 288), rep("weekend", 288))
# used column bind to create a data frame to graph with
all_avg_ <- as.data.frame(cbind(avg_steps, is_weekend))
str(all_avg_)
str(avg_steps)
times <- rep(activity$R_time[1:288], 2)
str(times)
all_avg_$time_interval <- times
str(all_avg_)
all_avg_$time_interval <- times
# plot with ggplot, using facet_wrap to create two panels
library(ggplot2)
g <- ggplot(data = all_avg_, aes(x = time_interval, y = avg_steps, group = is_weekend)) +
facet_wrap( ~ is_weekend, ncol = 1) + geom_line(color = "blue", lwd = .8) + theme_bw(base_size = 13) +
xlab("time (5 minute intervals)") + ylab("steps per interval")
# adding correctly formatted time x axis with package 'scales'
library(scales)
g <- g + scale_x_datetime(breaks = date_breaks("4 hour"), labels = date_format("%H:%M"))
print(g)
g <- ggplot(data = all_avg_, aes(x = time_interval, y = avg_steps, group = is_weekend)) +
facet_wrap( ~ is_weekend, ncol = 1) + geom_line(color = "blue", lwd = .8) + theme_bw(base_size = 13) +
xlab("time (sampled at 5 minute intervals)") + ylab("steps per time interval")
# adding correctly formatted time x axis with package 'scales'
library(scales)
g <- g + scale_x_datetime(breaks = date_breaks("4 hour"), labels = date_format("%H:%M"))
#print the graph
print(g)
ggplot(data = all_avg_, aes(x = time_interval, y = avg_steps, group = is_weekend)) +
facet_wrap( ~ is_weekend, ncol = 1) + geom_line(color = "blue", lwd = .8) + theme_bw(base_size = 14) +
xlab("time (sampled at 5 minute intervals)") + ylab("steps per time interval") + main("step activity vs time")
# adding correctly formatted time x axis with package 'scales'
